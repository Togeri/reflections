What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, a .git folder is created, containing metadata about the changes in the different files you have inside this repository, keeping a chronological order of those changes. 
No commits are created at the initialization of a repository.

We need to initialize a repository if we want to keep track of a project or folder and its changes. 

________________________________________________________________________________


How is the staging area different from the working directory and the repository?
What value do you think it offers?

The stating area is a pre-step so-to-speak in which we put every file we want to be commited at a time. The Working Directory is just the directory in which we´re working with the files we want to be commited, and the repository is the whole directory with every single file belonging to the particular git file, regardless wether we´re working with them currently or not.

________________________________________________________________________________

How can you use the staging area to make sure you have one commit per logical
change?

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?